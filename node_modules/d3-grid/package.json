{
  "name": "d3-grid",
  "version": "0.1.1",
  "description": "Grid layout for D3",
  "main": "d3-grid.js",
  "scripts": {
    "test": "vows --spec"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/interactivethings/d3-grid.git"
  },
  "keywords": [
    "d3",
    "layout",
    "grid"
  ],
  "author": {
    "name": "Jeremy Stucki",
    "url": "http://interactivethings.com"
  },
  "license": "BSD",
  "dependencies": {
    "d3": "~3.1.5"
  },
  "devDependencies": {
    "vows": "~0.7.0"
  },
  "readme": "# d3.layout.grid\n\nA grid layout for [D3](http://d3js.org). The grid layout takes a one-dimensional array of data and arranges it on a two-dimensional grid.\n\n## API\n\n<a name=\"layout-grid\" href=\"#layout-grid\">#</a> d3.layout.<b>grid</b>()\n\nConstructs a new grid layout.\n\n<a name=\"grid\" href=\"#grid\">#</a> <b>grid</b>(<i>nodes</i>)\n\nComputes the layout for <i>nodes</i>. Per default, the layout tries to keep the column and row number as equal as possible and uses point spacing. Two attributes are set on each node:\n\n* x – the computed <i>x</i>-coordinate of the node position.\n* y – the computed <i>y</i>-coordinate of the node position.\n\n<a name=\"points\" href=\"#points\">#</a> grid.<b>points</b>()\n\nConfigure the grid to treat nodes as points, cf. [d3.scale.ordinal().rangePoints()](https://github.com/mbostock/d3/wiki/Ordinal-Scales#wiki-ordinal_rangePoints).\n\n<a name=\"bands\" href=\"#bands\">#</a> grid.<b>bands</b>()\n\nConfigure the grid to treat nodes as bands, cf. [d3.scale.ordinal().rangeBands()](https://github.com/mbostock/d3/wiki/Ordinal-Scales#wiki-ordinal_rangeBands)\n\n<a name=\"padding\" href=\"#padding\">#</a> grid.<b>padding</b>([<i>padding</i>])\n\nSpecify the <i>padding</i> between the node bands as [<i>x</i>, <i>y</i>]. <i>x</i> and <i>y</i> are relative to the band width/height, similar to the <i>padding</i> parameter of [d3.scale.ordinal().rangeBands()](https://github.com/mbostock/d3/wiki/Ordinal-Scales#wiki-ordinal_rangeBands).\n\nIf [nodeSize](#nodeSize) is set, <i>padding</i> is absolute. For example, to configure a grid layout for nodes with 100×100px size, and 20px horizontal and vertical padding, use:\n\n```javascript\nvar grid = d3.layout.grid()\n  .nodeSize([100, 100])\n  .padding([20, 20]);\n```\n\n<a name=\"cols\" href=\"#cols\">#</a> grid.<b>cols</b>([<i>num</i>])\n\nFixes the layout to <i>num</i> columns or returns the number of columns (if it was set before).\n\n<a name=\"rows\" href=\"#rows\">#</a> grid.<b>rows</b>([<i>num</i>])\n\nFixes the layout to <i>num</i> rows or returns the number of rows (if it was set before).\n\n<a name=\"size\" href=\"#size\">#</a> grid.<b>size</b>([<i>size</i>])\n\nIf <i>size</i> is specified, sets the overall size of the layout as [<i>x</i>, <i>y</i>]. \n\nIf <i>size</i> is set, returns the current <i>size</i>. Default size is 1×1.\n\nIf instead [nodeSize](#nodeSize) is set, returns the actual size of the layout <i>after</i> [grid](#grid) has been called.\n\n<a name=\"nodeSize\" href=\"#nodeSize\">#</a> grid.<b>nodeSize</b>([<i>nodeSize</i>])\n\nIf <i>nodeSize</i> is specified, sets the size of an individual node as [<i>x</i>, <i>y</i>].\n\nIf <i>nodeSize</i> is set, returns the current <i>nodeSize</i>.\n\nIf instead [size](#size) is set, returns the actual size of a node <i>after</i> [grid](#grid) has been called.\n\n\n## Examples\n\n* [Grid layout demo](http://bl.ocks.org/herrstucki/5684816)\n\n## Author\n\nJeremy Stucki, [Interactive Things](http://interactivethings.com)\n\n## License\n\nBSD, see LICENSE.txt\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/interactivethings/d3-grid/issues"
  },
  "homepage": "https://github.com/interactivethings/d3-grid",
  "_id": "d3-grid@0.1.1",
  "_from": "d3-grid@"
}
